name: CD Pipeline

on:
  push:
    branches:
    - main
    - develop
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1

jobs:
  docker_build_push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build/Tag and Push Docker Image to AWS ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: pichincha-challenge
        IMAGE_TAG: ${{ github.sha }}
      if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  terraform_build:
    runs-on: ubuntu-latest
    steps:
    - name: Check Repository
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.5

    - name: Terraform Format
      id: fmt
      run: terraform fmt

    - name: Init Terraform
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate 
  
    - name: Terraform Plan
      id: plan
      run: terraform plan

    - name: Check Terraform output
      id: check_tf_output
      run: echo ::set-output name=infra_exists::$(terraform output infra_exists)

    - name: Deploy Infrastructure
      id: apply
      if: steps.check_tf_output.outputs.infra_exists != 'true'
      run: terraform apply -auto-approve

    - name: Destroy Infrastructure
      if: steps.apply.result == 'success' && steps.apply.outputs.check_tf_output.outputs.infra_exists == 'true'    
      run: terraform destroy -auto-approve